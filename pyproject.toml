# ===========================================
# PYPROJECT.TOML - EVAonline
# ===========================================
# Configurações centralizadas para ferramentas de desenvolvimento

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "evaonline"
version = "1.0.0"
description = "Sistema de monitoramento e análise de evapotranspiração"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "EVAonline Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# ===========================================
# Black - Code Formatter
# ===========================================
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | alembic/versions
)/
'''

# ===========================================
# isort - Import Sorter
# ===========================================
[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
skip = ["migrations", "alembic/versions", ".venv", "venv"]
known_first_party = ["backend", "frontend", "utils"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ===========================================
# Ruff - Fast Linter
# ===========================================
[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "alembic/versions",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/*" = ["F401", "F811"]  # unused imports, redefined

# ===========================================
# mypy - Type Checker
# ===========================================
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "dash.*",
    "plotly.*",
    "geopandas.*",
    "shapely.*",
    "celery.*",
    "redis.*",
    "pandas.*",
    "numpy.*",
    "scipy.*",
    "sklearn.*",
    "netCDF4.*",
    "xarray.*",
    "psycopg2.*",
]
ignore_missing_imports = true

# ===========================================
# pytest - Test Configuration
# ===========================================
[tool.pytest.ini_options]
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]

# ===========================================
# Coverage - Code Coverage
# ===========================================
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/versions/*",
    "*/conftest.py",
    "backend/main.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "class .*\\bProtocol\\):",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ===========================================
# pylint - Code Analyzer
# ===========================================
[tool.pylint.main]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
]
ignore = ["migrations", "alembic", ".venv", "venv", "tests"]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.messages_control]
disable = ["C0330", "C0326"]

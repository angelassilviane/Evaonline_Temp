version: "3.9"

services:
  # ============================================================================
  # TIER 1: DATA LAYER (Base Infrastructure)
  # ============================================================================

  redis:
    image: redis:7-alpine
    container_name: evaonline-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev-redis-pass-change-me}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "${REDIS_PASSWORD:-dev-redis-pass-change-me}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  postgres:
    image: postgres:17-alpine
    container_name: evaonline-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-evaonline}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev-pass-change-me}
      POSTGRES_DB: ${POSTGRES_DB:-evaonline}
      TZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-evaonline}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  # ============================================================================
  # TIER 2: APPLICATION LAYER (Nossa Aplicação)
  # ============================================================================
  # ⚠️ IMPORTANTE: Usar 'image' de imagem já buildada, não 'build'
  # Isso evita builds paralelos desnecessários

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: evaonline-runtime:latest
    container_name: evaonline-api
    environment:
      - SERVICE=api
      - DATABASE_URL=postgresql://${POSTGRES_USER:-evaonline}:${POSTGRES_PASSWORD:-dev-pass-change-me}@postgres:5432/${POSTGRES_DB:-evaonline}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev-redis-pass-change-me}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - TZ=UTC
      - API_BASE_URL=http://localhost:8000
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./config:/app/config
      - ./assets:/app/assets
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  celery-worker:
    image: evaonline-runtime:latest
    container_name: evaonline-celery-worker
    command: celery -A backend.infrastructure.celery.celery_config worker --loglevel=info --concurrency=2
    environment:
      - SERVICE=worker
      - DATABASE_URL=postgresql://${POSTGRES_USER:-evaonline}:${POSTGRES_PASSWORD:-dev-pass-change-me}@postgres:5432/${POSTGRES_DB:-evaonline}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev-redis-pass-change-me}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - TZ=UTC
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./config:/app/config
      - ./assets:/app/assets
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  celery-beat:
    image: evaonline-runtime:latest
    container_name: evaonline-celery-beat
    command: celery -A backend.infrastructure.celery.celery_config beat --loglevel=info
    environment:
      - SERVICE=beat
      - DATABASE_URL=postgresql://${POSTGRES_USER:-evaonline}:${POSTGRES_PASSWORD:-dev-pass-change-me}@postgres:5432/${POSTGRES_DB:-evaonline}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev-redis-pass-change-me}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - TZ=UTC
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./config:/app/config
      - ./assets:/app/assets
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  flower:
    image: evaonline-runtime:latest
    container_name: evaonline-flower
    command: celery -A backend.infrastructure.celery.celery_config flower --port=5555
    environment:
      - SERVICE=flower
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev-redis-pass-change-me}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:dev-redis-pass-change-me@redis:6379/0}
      - PYTHONUNBUFFERED=1
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

  # ============================================================================
  # TIER 3: MONITORING & ADMIN LAYER
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: evaonline-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: unless-stopped
    networks:
      - evaonline

  grafana:
    image: grafana/grafana:latest
    container_name: evaonline-grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - evaonline

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: evaonline-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@evaonline.org
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - evaonline

  portainer:
    image: portainer/portainer-ce:latest
    container_name: evaonline-portainer
    ports:
      - "9000:9000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - evaonline

  nginx:
    image: nginx:alpine
    container_name: evaonline-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf:/etc/nginx/conf.d
      - ./docker/nginx/certs:/etc/nginx/certs
      - ./docker/nginx/cache:/var/cache/nginx
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - evaonline

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  portainer_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  evaonline:
    driver: bridge

# ===========================================
# TEST RUNNER SCRIPT - EVAonline
# ===========================================
# Script para executar diferentes su√≠tes de testes

Write-Host "================================" -ForegroundColor Cyan
Write-Host "  EVAonline - Test Runner" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host ""

# Verificar se estamos no diret√≥rio correto
if (-Not (Test-Path "backend")) {
    Write-Host "‚ùå Erro: Execute este script da raiz do projeto!" -ForegroundColor Red
    exit 1
}

# Fun√ß√£o para exibir menu
function Show-Menu {
    Write-Host "Escolha qual tipo de teste executar:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "  1. üß™ Testes Unit√°rios" -ForegroundColor Green
    Write-Host "  2. üîó Testes de Integra√ß√£o (Docker)" -ForegroundColor Green
    Write-Host "  3. üåê Testes de API" -ForegroundColor Green
    Write-Host "  4. üöÄ Todos os testes" -ForegroundColor Green
    Write-Host "  5. üìä Testes com Coverage" -ForegroundColor Green
    Write-Host "  6. üê¢ Testes Lentos (Slow)" -ForegroundColor Green
    Write-Host "  7. üí® Smoke Tests" -ForegroundColor Green
    Write-Host "  8. üîç Verificar configura√ß√£o pytest" -ForegroundColor Blue
    Write-Host "  9. üßπ Limpar cache de testes" -ForegroundColor Blue
    Write-Host "  0. ‚ùå Sair" -ForegroundColor Red
    Write-Host ""
}

# Fun√ß√£o para rodar testes unit√°rios
function Run-UnitTests {
    Write-Host "üß™ Executando testes unit√°rios..." -ForegroundColor Cyan
    pytest tests/ -m "unit" -v --tb=short
}

# Fun√ß√£o para rodar testes de integra√ß√£o
function Run-IntegrationTests {
    Write-Host "üîó Executando testes de integra√ß√£o..." -ForegroundColor Cyan
    Write-Host "‚ö†Ô∏è  Certifique-se de que Docker est√° rodando!" -ForegroundColor Yellow
    Write-Host ""
    
    # Verificar se servi√ßos Docker est√£o rodando
    docker ps | Select-String "postgres" | Out-Null
    $postgresRunning = $?
    
    docker ps | Select-String "redis" | Out-Null
    $redisRunning = $?
    
    if (-Not $postgresRunning -Or -Not $redisRunning) {
        Write-Host "‚ö†Ô∏è  Servi√ßos Docker n√£o est√£o rodando!" -ForegroundColor Yellow
        Write-Host "   Deseja iniciar com docker-compose? (S/N)" -ForegroundColor Yellow
        $response = Read-Host
        
        if ($response -eq "S" -Or $response -eq "s") {
            Write-Host "üê≥ Iniciando servi√ßos Docker..." -ForegroundColor Cyan
            docker-compose up -d postgres redis
            Start-Sleep -Seconds 5
        }
        else {
            Write-Host "‚ùå Cancelando testes de integra√ß√£o" -ForegroundColor Red
            return
        }
    }
    
    pytest tests/integration/ -v --tb=short
}

# Fun√ß√£o para rodar testes de API
function Run-APITests {
    Write-Host "üåê Executando testes de API..." -ForegroundColor Cyan
    pytest tests/api/ -v --tb=short
}

# Fun√ß√£o para rodar todos os testes
function Run-AllTests {
    Write-Host "üöÄ Executando TODOS os testes..." -ForegroundColor Cyan
    pytest tests/ -v --tb=short
}

# Fun√ß√£o para rodar com coverage
function Run-TestsWithCoverage {
    Write-Host "üìä Executando testes com coverage..." -ForegroundColor Cyan
    pytest tests/ -v `
        --cov=backend `
        --cov-report=html `
        --cov-report=term-missing `
        --tb=short
    
    Write-Host ""
    Write-Host "‚úÖ Relat√≥rio de coverage gerado em: htmlcov/index.html" -ForegroundColor Green
    
    # Perguntar se quer abrir o relat√≥rio
    Write-Host "Deseja abrir o relat√≥rio de coverage? (S/N)" -ForegroundColor Yellow
    $response = Read-Host
    
    if ($response -eq "S" -Or $response -eq "s") {
        Start-Process "htmlcov/index.html"
    }
}

# Fun√ß√£o para rodar testes lentos
function Run-SlowTests {
    Write-Host "üê¢ Executando testes lentos..." -ForegroundColor Cyan
    pytest tests/ -m "slow" -v --tb=short
}

# Fun√ß√£o para rodar smoke tests
function Run-SmokeTests {
    Write-Host "üí® Executando smoke tests..." -ForegroundColor Cyan
    pytest tests/ -m "smoke" -v --tb=short
}

# Fun√ß√£o para verificar configura√ß√£o
function Check-PytestConfig {
    Write-Host "üîç Verificando configura√ß√£o do pytest..." -ForegroundColor Cyan
    Write-Host ""
    
    if (Test-Path "pytest.ini") {
        Write-Host "‚úÖ pytest.ini encontrado" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå pytest.ini n√£o encontrado!" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "Marcadores registrados:" -ForegroundColor Yellow
    pytest --markers
    
    Write-Host ""
    Write-Host "Configura√ß√£o atual:" -ForegroundColor Yellow
    pytest --co -q tests/ | Select-Object -First 10
}

# Fun√ß√£o para limpar cache
function Clean-TestCache {
    Write-Host "üßπ Limpando cache de testes..." -ForegroundColor Cyan
    
    if (Test-Path ".pytest_cache") {
        Remove-Item -Recurse -Force ".pytest_cache"
        Write-Host "‚úÖ .pytest_cache removido" -ForegroundColor Green
    }
    
    if (Test-Path "htmlcov") {
        Remove-Item -Recurse -Force "htmlcov"
        Write-Host "‚úÖ htmlcov removido" -ForegroundColor Green
    }
    
    if (Test-Path ".coverage") {
        Remove-Item -Force ".coverage"
        Write-Host "‚úÖ .coverage removido" -ForegroundColor Green
    }
    
    if (Test-Path "coverage.xml") {
        Remove-Item -Force "coverage.xml"
        Write-Host "‚úÖ coverage.xml removido" -ForegroundColor Green
    }
    
    Write-Host "‚úÖ Cache limpo com sucesso!" -ForegroundColor Green
}

# Loop principal
while ($true) {
    Show-Menu
    $choice = Read-Host "Digite sua escolha"
    Write-Host ""
    
    switch ($choice) {
        "1" { Run-UnitTests }
        "2" { Run-IntegrationTests }
        "3" { Run-APITests }
        "4" { Run-AllTests }
        "5" { Run-TestsWithCoverage }
        "6" { Run-SlowTests }
        "7" { Run-SmokeTests }
        "8" { Check-PytestConfig }
        "9" { Clean-TestCache }
        "0" {
            Write-Host "üëã Saindo..." -ForegroundColor Cyan
            exit 0
        }
        default {
            Write-Host "‚ùå Op√ß√£o inv√°lida!" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    Write-Host "Pressione qualquer tecla para continuar..." -ForegroundColor Gray
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Clear-Host
}

"""
Factory para criar clientes clim√°ticos com cache injetado.

Fornece m√©todo centralizado para instanciar clientes de APIs clim√°ticas
com todas as depend√™ncias (cache Redis) corretamente injetadas.

Uso:
    from backend.api.services.climate_factory import ClimateClientFactory
    
    # Criar cliente NASA POWER
    client = ClimateClientFactory.create_nasa_power()
    data = await client.get_daily_data(lat, lon, start, end)
    await client.close()
    
    # Criar cliente MET Norway
    client = ClimateClientFactory.create_met_norway()
    data = await client.get_forecast_data(lat, lon, start, end)
    await client.close()
"""

from typing import Optional

from loguru import logger

from backend.api.services.met_norway_client import METNorwayClient
from backend.api.services.nasa_power_client import NASAPowerClient
from backend.api.services.nws_client import NWSClient
from backend.infrastructure.cache.climate_cache import ClimateCacheService


class ClimateClientFactory:
    """
    Factory para criar clientes clim√°ticos com depend√™ncias injetadas.
    
    Features:
    - Singleton do servi√ßo de cache (reutiliza conex√£o Redis)
    - Inje√ß√£o autom√°tica de cache em todos os clientes
    - M√©todo centralizado de cleanup
    
    Exemplo:
        # Usar factory ao inv√©s de instanciar diretamente
        client = ClimateClientFactory.create_nasa_power()
        data = await client.get_daily_data(...)
    """
    
    _cache_service: Optional[ClimateCacheService] = None
    
    @classmethod
    def get_cache_service(cls) -> ClimateCacheService:
        """
        Retorna inst√¢ncia singleton do servi√ßo de cache.
        
        Garante que todos os clientes compartilhem a mesma
        conex√£o Redis, evitando overhead de m√∫ltiplas conex√µes.
        
        Returns:
            ClimateCacheService: Servi√ßo de cache compartilhado
        """
        if cls._cache_service is None:
            cls._cache_service = ClimateCacheService(prefix="climate")
            logger.info("‚úÖ ClimateCacheService singleton criado")
        return cls._cache_service
    
    @classmethod
    def create_nasa_power(cls) -> NASAPowerClient:
        """
        Cria cliente NASA POWER com cache injetado.
        
        Features:
        - Cobertura global (qualquer coordenada)
        - Dados di√°rios desde 1981
        - Dom√≠nio p√∫blico (sem restri√ß√µes)
        - Cache Redis autom√°tico
        - Delay: 2-7 dias
        
        Returns:
            NASAPowerClient: Cliente configurado e pronto para uso
            
        Exemplo:
            client = ClimateClientFactory.create_nasa_power()
            data = await client.get_daily_data(
                lat=-15.7939,
                lon=-47.8828,
                start_date=datetime(2024, 10, 1),
                end_date=datetime(2024, 10, 7)
            )
            await client.close()
        """
        cache = cls.get_cache_service()
        client = NASAPowerClient(cache=cache)
        logger.debug("üåç NASAPowerClient criado com cache injetado")
        return client
    
    @classmethod
    def create_met_norway(cls) -> METNorwayClient:
        """
        Cria cliente MET Norway com cache injetado.
        
        Features:
        - Cobertura: Europa (-25¬∞W a 45¬∞E, 35¬∞N a 72¬∞N)
        - Dados hor√°rios de alta qualidade
        - Licen√ßa CC-BY 4.0 (atribui√ß√£o obrigat√≥ria)
        - Cache Redis autom√°tico
        - Real-time (delay ~1 hora)
        
        IMPORTANTE: Exibir atribui√ß√£o obrigat√≥ria:
            attribution = client.get_attribution()
            # "Weather data from MET Norway (CC BY 4.0)"
        
        Returns:
            METNorwayClient: Cliente configurado e pronto para uso
            
        Exemplo:
            client = ClimateClientFactory.create_met_norway()
            
            # Verificar cobertura
            if client.is_in_coverage(lat=48.8566, lon=2.3522):
                data = await client.get_forecast_data(
                    lat=48.8566,  # Paris
                    lon=2.3522,
                    start_date=datetime.now(),
                    end_date=datetime.now() + timedelta(days=7)
                )
            
            await client.close()
        """
        cache = cls.get_cache_service()
        client = METNorwayClient(cache=cache)
        logger.debug("üá≥üá¥ METNorwayClient criado com cache injetado")
        return client
    
    @classmethod
    def create_nws(cls) -> NWSClient:
        """
        Cria cliente NWS (National Weather Service) com cache injetado.
        
        Features:
        - Cobertura: USA Continental (-125¬∞W a -66¬∞W, 24¬∞N a 49¬∞N)
        - Dados hor√°rios de alta qualidade
        - Dom√≠nio p√∫blico (US Government)
        - Cache Redis autom√°tico
        - Real-time (delay ~1 hora)
        
        Returns:
            NWSClient: Cliente configurado e pronto para uso
            
        Exemplo:
            client = ClimateClientFactory.create_nws()
            
            # Verificar cobertura
            if client.is_in_coverage(lat=38.8977, lon=-77.0365):
                data = await client.get_forecast_data(
                    lat=38.8977,  # Washington DC
                    lon=-77.0365,
                    start_date=datetime.now(),
                    end_date=datetime.now() + timedelta(days=7)
                )
            
            await client.close()
        """
        cache = cls.get_cache_service()
        client = NWSClient(cache=cache)
        logger.debug("üá∫üá∏ NWSClient criado com cache injetado")
        return client
    
    @classmethod
    async def close_all(cls):
        """
        Fecha todas as conex√µes abertas (Redis, HTTP clients).
        
        Deve ser chamado ao finalizar aplica√ß√£o ou em cleanup
        de testes para evitar warnings de conex√µes n√£o fechadas.
        
        Exemplo:
            # No shutdown da aplica√ß√£o
            await ClimateClientFactory.close_all()
        """
        if cls._cache_service and cls._cache_service.redis:
            await cls._cache_service.redis.close()
            logger.info("‚úÖ ClimateCacheService Redis connection closed")
            cls._cache_service = None


# Exemplo de uso completo
async def example_usage():
    """
    Demonstra uso completo da factory.
    
    Este exemplo mostra o fluxo t√≠pico de:
    1. Criar cliente via factory
    2. Buscar dados (cache autom√°tico)
    3. Fechar conex√µes
    """
    from datetime import datetime, timedelta
    
    try:
        # 1. Criar cliente NASA POWER
        nasa_client = ClimateClientFactory.create_nasa_power()
        
        # 2. Buscar dados para Bras√≠lia
        logger.info("Buscando dados clim√°ticos para Bras√≠lia...")
        data = await nasa_client.get_daily_data(
            lat=-15.7939,
            lon=-47.8828,
            start_date=datetime(2024, 10, 1),
            end_date=datetime(2024, 10, 7)
        )
        
        logger.info(f"‚úÖ Recebidos {len(data)} registros de NASA POWER")
        
        # 3. Exemplo com MET Norway (Europa)
        met_client = ClimateClientFactory.create_met_norway()
        
        # Verificar se est√° na cobertura
        if met_client.is_in_coverage(lat=48.8566, lon=2.3522):
            logger.info("Buscando dados clim√°ticos para Paris...")
            met_data = await met_client.get_forecast_data(
                lat=48.8566,
                lon=2.3522,
                start_date=datetime.now(),
                end_date=datetime.now() + timedelta(days=3)
            )
            
            logger.info(f"‚úÖ Recebidos {len(met_data)} registros de MET Norway")
            
            # IMPORTANTE: Exibir atribui√ß√£o obrigat√≥ria
            attribution = met_client.get_attribution()
            logger.info(f"üìù Atribui√ß√£o: {attribution}")
        
        # 4. Fechar conex√µes individuais
        await nasa_client.close()
        await met_client.close()
        
    finally:
        # 5. Cleanup global
        await ClimateClientFactory.close_all()
        logger.info("‚úÖ Todas as conex√µes fechadas")


if __name__ == "__main__":
    import asyncio
    asyncio.run(example_usage())

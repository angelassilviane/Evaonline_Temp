"""
Rotas da API para gerenciamento de fontes de dados clim√°ticos.
"""

from datetime import datetime
from typing import Any, Dict, List

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel, Field

from ..services.climate_source_manager import ClimateSourceManager

router = APIRouter(
    prefix="/api/v1/climate/sources",
    tags=["Climate Data Sources"]
)


class AvailableSourcesResponse(BaseModel):
    """Resposta com fontes dispon√≠veis."""
    location: Dict[str, float] = Field(
        ..., description="Coordenadas da localiza√ß√£o"
    )
    available_sources: List[Dict] = Field(
        ..., description="Lista de fontes dispon√≠veis"
    )
    default_mode: str = Field(
        default="fusion", description="Modo padr√£o de opera√ß√£o"
    )
    fusion_sources: List[str] = Field(
        ..., description="IDs das fontes para fus√£o"
    )


class ValidationResponse(BaseModel):
    """Resposta de valida√ß√£o de per√≠odo."""
    valid: bool = Field(..., description="Se o per√≠odo √© v√°lido")
    message: str | None = Field(
        default=None, description="Mensagem de erro (se inv√°lido)"
    )


class FusionWeightsResponse(BaseModel):
    """Resposta com pesos de fus√£o."""
    sources: List[str] = Field(..., description="IDs das fontes")
    weights: Dict[str, float] = Field(..., description="Pesos normalizados")
    total: float = Field(default=1.0, description="Soma dos pesos")


@router.get(
    "/available",
    response_model=AvailableSourcesResponse,
    summary="Lista fontes dispon√≠veis para localiza√ß√£o",
    description="""
    Retorna lista de fontes de dados clim√°ticos dispon√≠veis para uma
    coordenada espec√≠fica. Detecta automaticamente cobertura regional.
    """
)
async def get_available_sources(
    lat: float = Query(..., ge=-90, le=90, description="Latitude"),
    long: float = Query(..., ge=-180, le=180, description="Longitude")
) -> Dict:
    """Lista fontes dispon√≠veis para uma localiza√ß√£o."""
    manager = ClimateSourceManager()
    sources = manager.get_available_sources(lat, long)

    # Filtra apenas fontes em tempo real para fus√£o padr√£o
    realtime_sources = [
        s["id"] for s in sources if s.get("realtime", False)
    ]

    return {
        "location": {"lat": lat, "long": long},
        "available_sources": sources,
        "default_mode": "fusion",
        "fusion_sources": realtime_sources
    }


@router.get(
    "/validate-period",
    response_model=ValidationResponse,
    summary="Valida per√≠odo de datas",
    description="""
    Valida se o per√≠odo selecionado est√° dentro das especifica√ß√µes:
    - M√≠nimo 7 dias, m√°ximo 15 dias
    - M√°ximo 1 ano no passado
    - M√°ximo 1 dia no futuro
    """
)
async def validate_period(
    start_date: datetime = Query(..., description="Data inicial (ISO)"),
    end_date: datetime = Query(..., description="Data final (ISO)")
) -> Dict:
    """Valida per√≠odo de datas."""
    manager = ClimateSourceManager()
    valid, message = manager.validate_period(start_date, end_date)

    return {
        "valid": valid,
        "message": message if not valid else "Per√≠odo v√°lido"
    }


@router.post(
    "/fusion-weights",
    response_model=FusionWeightsResponse,
    summary="Calcula pesos para fus√£o de dados",
    description="""
    Calcula pesos normalizados para fus√£o de dados baseado em
    prioridades das fontes selecionadas.
    
    ‚ö†Ô∏è IMPORTANTE: Fontes com licen√ßa n√£o-comercial (ex: Open-Meteo)
    s√£o automaticamente rejeitadas.
    """
)
async def calculate_fusion_weights(
    sources: List[str] = Query(..., description="IDs das fontes"),
    lat: float = Query(..., ge=-90, le=90, description="Latitude"),
    long: float = Query(..., ge=-180, le=180, description="Longitude")
) -> Dict:
    """Calcula pesos de fus√£o para fontes selecionadas."""
    manager = ClimateSourceManager()

    # Valida que fontes existem e est√£o dispon√≠veis
    available = manager.get_available_sources(lat, long)
    available_ids = [s["id"] for s in available]

    invalid_sources = [s for s in sources if s not in available_ids]
    if invalid_sources:
        raise HTTPException(
            status_code=400,
            detail=f"Fontes indispon√≠veis: {invalid_sources}"
        )

    # Calcula pesos (pode lan√ßar ValueError se licen√ßa inv√°lida)
    try:
        weights = manager.get_fusion_weights(sources, (lat, long))
    except ValueError as e:
        # Viola√ß√£o de licen√ßa (ex: Open-Meteo em fus√£o)
        raise HTTPException(
            status_code=403,  # Forbidden
            detail=str(e)
        )

    return {
        "sources": sources,
        "weights": weights,
        "total": sum(weights.values())
    }


@router.get(
    "/validation-info",
    summary="Informa√ß√µes sobre valida√ß√£o cient√≠fica",
    description="""
    Retorna informa√ß√µes sobre datasets usados para valida√ß√£o
    cient√≠fica do c√°lculo de ETo (Xavier, AgERA5, etc.).
    """
)
async def get_validation_info() -> Dict:
    """Retorna informa√ß√µes sobre datasets de valida√ß√£o."""
    manager = ClimateSourceManager()
    return manager.get_validation_info()


@router.get(
    "/info/{source_id}",
    summary="Detalhes de uma fonte espec√≠fica",
    description="Retorna metadados completos de uma fonte de dados."
)
async def get_source_info(source_id: str) -> Dict[str, Any]:
    """Retorna informa√ß√µes detalhadas de uma fonte."""
    manager = ClimateSourceManager()

    if source_id not in manager.SOURCES_CONFIG:
        raise HTTPException(
            status_code=404,
            detail=f"Fonte '{source_id}' n√£o encontrada"
        )

    return manager.SOURCES_CONFIG[source_id]


@router.post(
    "/download",
    summary="Baixar dados clim√°ticos processados",
    description="""
    Endpoint para download de dados clim√°ticos.
    ‚ö†Ô∏è RESTRI√á√ÉO: Open-Meteo (CC-BY-NC 4.0) N√ÉO permite download.
    Apenas fontes com licen√ßas comerciais permitidas.
    """
)
async def download_climate_data(
    sources: List[str] = Query(..., description="IDs das fontes"),
    format: str = Query(
        default="csv",
        regex="^(csv|json|netcdf)$",
        description="Formato de sa√≠da"
    )
) -> Dict:
    """
    Prepara download de dados clim√°ticos.
    
    Valida√ß√µes:
    - Open-Meteo (openmeteo) √© BLOQUEADO (CC-BY-NC 4.0)
    - Outras fontes permitidas com atribui√ß√£o adequada
    
    Args:
        sources: Lista de IDs de fontes
        format: Formato de sa√≠da (csv, json, netcdf)
        
    Returns:
        Dict com URL de download ou erro 403
        
    Raises:
        HTTPException 403: Se Open-Meteo inclu√≠do
        HTTPException 400: Se formato inv√°lido
    """
    # üîí PROTE√á√ÉO CC-BY-NC: Bloqueia Open-Meteo
    if "openmeteo" in sources:
        raise HTTPException(
            status_code=403,  # Forbidden
            detail={
                "error": "download_not_allowed",
                "message": (
                    "Open-Meteo n√£o permite download de dados. "
                    "Licen√ßa CC-BY-NC 4.0 restringe redistribui√ß√£o e "
                    "uso comercial. Dados dispon√≠veis apenas para "
                    "visualiza√ß√£o na interface."
                ),
                "license": "CC-BY-NC 4.0",
                "allowed_uses": [
                    "Visualiza√ß√£o na interface web",
                    "Pesquisa acad√™mica (sem redistribui√ß√£o)",
                    "Publica√ß√µes cient√≠ficas (com cita√ß√£o)"
                ],
                "prohibited_uses": [
                    "Download de dados brutos ou processados",
                    "Fus√£o com outras fontes (data fusion)",
                    "Redistribui√ß√£o ou venda de dados",
                    "Integra√ß√£o em produtos comerciais"
                ],
                "citation": (
                    "Weather data by Open-Meteo.com "
                    "(https://open-meteo.com) - CC-BY-NC 4.0"
                ),
                "alternative_sources": [
                    "nasa_power (Dom√≠nio P√∫blico)",
                    "met_norway (CC-BY 4.0 - comercial OK)",
                    "nws_usa (Dom√≠nio P√∫blico)"
                ]
            }
        )
    
    # Validar fontes existem
    manager = ClimateSourceManager()
    invalid = [s for s in sources if s not in manager.SOURCES_CONFIG]
    if invalid:
        raise HTTPException(
            status_code=400,
            detail=f"Fontes inv√°lidas: {invalid}"
        )
    
    # TODO: Implementar gera√ß√£o de arquivo de download
    # Por enquanto, retorna URL placeholder
    return {
        "status": "ready",
        "sources": sources,
        "format": format,
        "download_url": "/api/v1/climate/download/file?id=placeholder",
        "expires_in": 3600,  # 1 hora
        "attribution_required": [
            manager.SOURCES_CONFIG[s].get("attribution", "")
            for s in sources
            if manager.SOURCES_CONFIG[s].get("attribution")
        ]
    }


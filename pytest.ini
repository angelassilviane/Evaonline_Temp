# ===========================================
# PYTEST CONFIGURATION - EVAonline
# ===========================================

[pytest]
# Diretórios de teste
testpaths = tests backend/tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Opções de execução
minversion = 7.0
addopts =
    # Verbosidade e output
    -ra
    --strict-markers
    --strict-config
    --showlocals
    # Coverage
    --cov=backend
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-branch
    # Paralelização (descomente se usar pytest-xdist)
    # -n auto
    # Performance
    --tb=short
    --disable-warnings

# Marcadores customizados
markers =
    unit: Testes unitários rápidos (deselect with '-m "not unit"')
    integration: Testes de integração que requerem serviços externos (deselect with '-m "not integration"')
    api: Testes de API/endpoints (deselect with '-m "not api"')
    slow: Testes lentos (deselect with '-m "not slow"')
    database: Testes que requerem banco de dados (deselect with '-m "not database"')
    redis: Testes que requerem Redis (deselect with '-m "not redis"')
    celery: Testes que requerem Celery (deselect with '-m "not celery"')
    docker: Testes que requerem Docker (deselect with '-m "not docker"')
    e2e: Testes end-to-end (deselect with '-m "not e2e"')
    smoke: Testes de smoke (quick sanity checks)

# Timeout para testes (requer pytest-timeout)
timeout = 300
timeout_method = thread

# Asyncio
asyncio_mode = auto

# Fixtures
usefixtures = 

# Ignorar warnings específicos
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:dash
    ignore::UserWarning:plotly

# Configurações de cobertura
[coverage:run]
source = backend
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */.venv/*
    */migrations/*
    */alembic/versions/*
    */conftest.py
    backend/main.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    class .*\bProtocol\):
    @overload

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
